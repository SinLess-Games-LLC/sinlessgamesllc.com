name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd apps/sinlessgames-ui
        npm install

    - name: Build the app
      run: npx nx build sinlessgames-ui

    - name: Verify build output
      run: |
        ls -la dist/apps/sinlessgames-ui

    - uses: actions/cache@v4
      with:
        # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
        path: |
          ~/.npm
          ${{ github.workspace }}/apps/sinlessgames-ui/.next/cache
        # Generate a new cache whenever packages or source files change.
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
        # If source files changed but packages didn't, rebuild from a prior cache.
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

    - name: Get previous image version
      id: get-previous-version
      run: |
        PREVIOUS_VERSION=$(curl -s -H "Accept: application/vnd.docker.distribution.manifest.v2+json" \
          "https://registry.hub.docker.com/v2/repositories/sinless777/sinlessgames-ui/tags/latest" | jq -r .tag)
        echo "PREVIOUS_VERSION=${PREVIOUS_VERSION}" >> $GITHUB_ENV

    - name: Determine new version
      id: determine-new-version
      run: |
        PREVIOUS_VERSION=${{ env.PREVIOUS_VERSION }}
        if [[ $PREVIOUS_VERSION =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
          MAJOR=${BASH_REMATCH[1]}
          MINOR=${BASH_REMATCH[2]}
          PATCH=${BASH_REMATCH[3]}
          NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
        else
          NEW_VERSION="1.0.0"
        fi
        echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV

    - name: Build the Docker image
      run: |
        docker build . --file apps/sinlessgames-ui/Dockerfile --tag sinless777/sinlessgames-ui:${{ env.NEW_VERSION }}

    - name: Test the Docker image
      run: |
        docker run -d --name test-container sinless777/sinlessgames-ui:${{ env.NEW_VERSION }}
        sleep 10
        docker ps | grep test-container

    - name: Push the Docker image
      run: |
        docker tag sinless777/sinlessgames-ui:${{ env.NEW_VERSION }} sinless777/sinlessgames-ui:latest
        docker push sinless777/sinlessgames-ui:${{ env.NEW_VERSION }}
        docker push sinless777/sinlessgames-ui:latest

    - name: Clean up test container
      run: |
        docker stop test-container
        docker rm test-container


