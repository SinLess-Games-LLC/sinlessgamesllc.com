name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Determine previous version
        id: determine-previous-version
        run: |
          PREVIOUS_VERSION=$(curl -s "https://registry.hub.docker.com/v2/repositories/sinless777/sinlessgames-ui/tags" | jq -r '.results[].name' | grep -v 'latest')
          echo "Previous version: $PREVIOUS_VERSION"
          echo "PREVIOUS_VERSION=$PREVIOUS_VERSION" >> $GITHUB_ENV

      - name: Determine new version
        id: determine-new-version
        run: |
              # Extract version from package.json
              PACKAGE_VERSION=$(jq -r '.version' package.json)
              echo "Package version: $PACKAGE_VERSION"

              # Check if the previous version matches xx.xx.xx format
              if [[ "${{ env.PREVIOUS_VERSION }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                echo "Previous version format is correct"
              else
                echo "Previous version format is incorrect"
                exit 1
              fi

              # Split the previous version into major, minor, and patch
              IFS='.' read -r MAJOR MINOR PATCH <<<"${{ env.PREVIOUS_VERSION }}"
              echo "Previous version components: Major=$MAJOR, Minor=$MINOR, Patch=$PATCH"

              # Compare the previous version with the version from package.json
              if [ "$PACKAGE_VERSION" == "${{ env.PREVIOUS_VERSION }}" ]; then
                echo "Versions match"
              else
                echo "Versions do not match"
                exit 1
              fi
    
