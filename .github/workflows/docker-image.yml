name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Determine previous version
        id: determine-previous-version
        run: |
          PREVIOUS_VERSION=$(curl -s "https://registry.hub.docker.com/v2/repositories/sinless777/sinlessgames-ui/tags" | jq -r '.results[].name' | grep -v 'latest')
          echo "Previous version: $PREVIOUS_VERSION"
          echo "PREVIOUS_VERSION=$PREVIOUS_VERSION" >> $GITHUB_ENV

      - name: Determine new version
        id: determine-new-version
        run: |
          # Extract version from package.json
          PACKAGE_VERSION=$(jq -r '.version' package.json)
          echo "Package version: $PACKAGE_VERSION"

          # Check if the previous version matches xx.xx.xx format
          if [[ "${{ env.PREVIOUS_VERSION }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Previous version format is correct"
          else
            echo "Previous version format is incorrect"
            exit 1
          fi
  
          # Split the previous version into major, minor, and patch
          IFS='.' read -r MAJOR MINOR PATCH <<<"${{ env.PREVIOUS_VERSION }}"
          echo "Previous version components: Major=$MAJOR, Minor=$MINOR, Patch=$PATCH"

          # Create the new version
          NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
          echo "New version: $NEW_VERSION"

          # Compare the previous version with the version from package.json
          VERSIONS_MATCH=false
          if [ "$PACKAGE_VERSION" == "${{ env.PREVIOUS_VERSION }}" ]; then
            echo "Versions match"
            VERSIONS_MATCH=true
          else
            echo "Versions do not match"
          fi

          echo "VERSION_MATCH=$VERSION_MATCH" >> $GITHUB_ENV

      - name: Reconcile Version
        id: reconcile-version
        run: |
          # Check if versions match
          if [ "$VERSIONS_MATCH" == "false" ]; then
            echo "Versions do not match, reconciling versions"
      
            # Replace version in package.json with the new version
            jq --arg new_version "$NEW_VERSION" '.version = $new_version' package.json > tmp_package.json && mv tmp_package.json package.json

            # Read the new version from the updated package.json and echo it
            NEW_PACKAGE_VERSION=$(jq -r '.version' package.json)
            echo "New package version: $NEW_PACKAGE_VERSION"
          
            echo "Version reconciled successfully"
          else
            echo "Versions match, no action required"
          fi

      - name: Push changes to repository
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git add .
          git commit -m "Update package.json version to $NEW_VERSION"
          git push origin HEAD:main


    
